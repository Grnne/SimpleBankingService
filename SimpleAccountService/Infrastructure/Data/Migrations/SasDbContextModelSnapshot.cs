// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Simple_Account_Service.Features.Accounts.Entities;
using Simple_Account_Service.Features.Transactions.Entities;
using Simple_Account_Service.Infrastructure.Data;

#nullable disable

namespace Simple_Account_Service.Infrastructure.Data.Migrations
{
    [DbContext(typeof(SasDbContext))]
    partial class SasDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "account_type", new[] { "checking", "credit", "deposit" });
            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "transaction_type", new[] { "credit", "debit" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Simple_Account_Service.Features.Accounts.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("closed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("created_at");

                    b.Property<decimal?>("CreditLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("credit_limit");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<bool>("Frozen")
                        .HasColumnType("boolean")
                        .HasColumnName("frozen");

                    b.Property<decimal?>("InterestRate")
                        .HasColumnType("numeric(5,4)")
                        .HasColumnName("interest_rate");

                    b.Property<DateTime?>("LastInterestAccrualAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_interest_accrual_at");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<AccountType>("Type")
                        .HasColumnType("account_type")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_accounts");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_accounts_owner_id");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OwnerId"), "hash");

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("Simple_Account_Service.Features.Transactions.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<Guid?>("CounterpartyAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("counterparty_account_id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamptz")
                        .HasColumnName("timestamp");

                    b.Property<TransactionType>("Type")
                        .HasColumnType("transaction_type")
                        .HasColumnName("type");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("Timestamp")
                        .HasDatabaseName("ix_transactions_timestamp");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Timestamp"), "gist");

                    b.HasIndex("AccountId", "Timestamp")
                        .HasDatabaseName("ix_transactions_account_id_timestamp");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("Simple_Account_Service.Infrastructure.Messaging.Inbox.InboxConsumedMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("handler");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("processed_at");

                    b.HasKey("MessageId")
                        .HasName("pk_inbox_consumed_messages");

                    b.ToTable("inbox_consumed_messages", (string)null);
                });

            modelBuilder.Entity("Simple_Account_Service.Infrastructure.Messaging.Inbox.InboxDeadLetter", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("message_id");

                    b.Property<Guid?>("CausationId")
                        .HasColumnType("uuid")
                        .HasColumnName("causation_id");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Error")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error");

                    b.Property<string>("Handler")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("handler");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime>("ReceivedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("received_at");

                    b.HasKey("MessageId")
                        .HasName("pk_inbox_dead_letters");

                    b.ToTable("inbox_dead_letters", (string)null);
                });

            modelBuilder.Entity("Simple_Account_Service.Infrastructure.Messaging.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CausationId")
                        .HasColumnType("uuid")
                        .HasColumnName("causation_id");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid")
                        .HasColumnName("correlation_id");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("event_type");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("occurred_at");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamptz")
                        .HasColumnName("processed_at");

                    b.Property<bool>("Published")
                        .HasColumnType("boolean")
                        .HasColumnName("published");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("Simple_Account_Service.Features.Transactions.Entities.Transaction", b =>
                {
                    b.HasOne("Simple_Account_Service.Features.Accounts.Entities.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_accounts_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Simple_Account_Service.Features.Accounts.Entities.Account", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
